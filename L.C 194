Transpose! - Transpose here means to "swap" the columns
we have a file.txt with name aga alice 21 ryan 30. we want it to be flipped so its like name - and then age.

We are using awk again. 

Example: 

name age
alice 21
ryan 30

awk will see this as $1 is name and $2 is age. 
line 2 as $1 = alice and $2 is 21 and so on.

So what we want thought, is this;

$1 to be name alice ryan and $2 to be age 21 30.

we are revisiting our loop like in the other one. 

awk ' {
for (i = 1; 1<= NF; i++) {
col[i] = col[i] " " $1 # so col is the array we are creating here. [i] happens to be the index so this could be i or w/e we set earlier in the code. this is where it will be storedin. So, we are saying store the column index and add in a blank space  and the new word in $1. 

Image it to look like this;

Line 1: $1 = name, $2 = age

col[1] = "" + " " + "name" = " name"

col[2] = "" + " " + "age" = " age"

Line 2: $1 = alice, $2 = 21

col[1] = " name" + " " + "alice" = " name alice"

col[2] = " age" + " " + "21" = " age 21"

Line 3: $1 = ryan, $2 = 30

col[1] = " name alice" + " " + "ryan" = " name alice ryan"

col[2] = " age 21" + " " + "30" = " age 21 30"

CODE GOES HERE:

awk '{
  for (i = 1; i <= NF; i++) {
    col[i] = col[i] " " $i      # build each column string
  }
  if (NF > maxcols) maxcols = NF
}
END {
  for (j = 1; j <= maxcols; j++) {
    print substr(col[j], 2)     # drop the leading space
  }
}' file.txt



Lets talk about the if (NF Part here. 

NF is number of fields on the currently line. 
maxcols is our own variable we made to track the largest number of fields we have seen so far. 

so what we say here is this;

if NF is greater than our variable maxcols, update it. 

We do the 2nd loop because we dont know how many columns we may have. 

for (x = 1; x <= maxcols; x++) 
